# Generated by Django 4.2.7 on 2025-06-27 19:21

from django.db import migrations, models
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Sample",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when this record was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when this record was last updated",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this record is active (used for soft delete)",
                    ),
                ),
                (
                    "created_by",
                    models.CharField(
                        blank=True,
                        help_text="Username of the user who created this record",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "updated_by",
                    models.CharField(
                        blank=True,
                        help_text="Username of the user who last updated this record",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name or identifier of the sample", max_length=100
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Optional description of the sample",
                        null=True,
                    ),
                ),
                (
                    "sample_type",
                    models.CharField(
                        choices=[
                            ("blood", "Blood"),
                            ("urine", "Urine"),
                            ("tissue", "Tissue"),
                            ("saliva", "Saliva"),
                            ("other", "Other"),
                        ],
                        default="other",
                        help_text="Type of the sample",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("rejected", "Rejected"),
                            ("archived", "Archived"),
                        ],
                        default="pending",
                        help_text="Current status of the sample",
                        max_length=20,
                    ),
                ),
                (
                    "barcode",
                    models.CharField(
                        blank=True,
                        help_text="Unique barcode identifier for the sample",
                        max_length=50,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "user_id",
                    models.UUIDField(
                        help_text="ID of the user who created this sample (references public.users)"
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional metadata for the sample",
                    ),
                ),
                (
                    "collection_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date when the sample was collected",
                        null=True,
                    ),
                ),
                (
                    "collection_location",
                    models.CharField(
                        blank=True,
                        help_text="Location where the sample was collected",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "processing_started",
                    models.DateTimeField(
                        blank=True, help_text="Date when processing started", null=True
                    ),
                ),
                (
                    "processing_completed",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date when processing was completed",
                        null=True,
                    ),
                ),
                (
                    "results",
                    models.JSONField(
                        blank=True, default=dict, help_text="Sample processing results"
                    ),
                ),
            ],
            options={
                "verbose_name": "Sample",
                "verbose_name_plural": "Samples",
                "db_table": "samples",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddConstraint(
            model_name="sample",
            constraint=models.UniqueConstraint(
                condition=models.Q(("barcode__isnull", False)),
                fields=("barcode",),
                name="unique_barcode_per_tenant",
            ),
        ),
    ]
